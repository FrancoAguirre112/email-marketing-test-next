"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/leac";
exports.ids = ["vendor-chunks/leac"];
exports.modules = {

/***/ "(rsc)/./node_modules/leac/lib/leac.cjs":
/*!****************************************!*\
  !*** ./node_modules/leac/lib/leac.cjs ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: !0\n}));\nconst e = /\\n/g;\nfunction t(t) {\n    const o = [\n        ...t.matchAll(e)\n    ].map((e)=>e.index || 0);\n    o.unshift(-1);\n    const s = n(o, 0, o.length);\n    return (e)=>r(s, e);\n}\nfunction n(e, t, r) {\n    if (r - t == 1) return {\n        offset: e[t],\n        index: t + 1\n    };\n    const o = Math.ceil((t + r) / 2), s = n(e, t, o), l = n(e, o, r);\n    return {\n        offset: s.offset,\n        low: s,\n        high: l\n    };\n}\nfunction r(e, t) {\n    return function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"index\");\n    }(e) ? {\n        line: e.index,\n        column: t - e.offset\n    } : r(e.high.offset < t ? e.high : e.low, t);\n}\nfunction o(e, t) {\n    return {\n        ...e,\n        regex: s(e, t)\n    };\n}\nfunction s(e, t) {\n    if (0 === e.name.length) throw new Error(`Rule #${t} has empty name, which is not allowed.`);\n    if (function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"regex\");\n    }(e)) return function(e) {\n        if (e.global) throw new Error(`Regular expression /${e.source}/${e.flags} contains the global flag, which is not allowed.`);\n        return e.sticky ? e : new RegExp(e.source, e.flags + \"y\");\n    }(e.regex);\n    if (function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"str\");\n    }(e)) {\n        if (0 === e.str.length) throw new Error(`Rule #${t} (\"${e.name}\") has empty \"str\" property, which is not allowed.`);\n        return new RegExp(l(e.str), \"y\");\n    }\n    return new RegExp(l(e.name), \"y\");\n}\nfunction l(e) {\n    return e.replace(/[-[\\]{}()*+!<=:?./\\\\^$|#\\s,]/g, \"\\\\$&\");\n}\nexports.createLexer = function(e, n = \"\", r = {}) {\n    const s = \"string\" != typeof n ? n : r, l = \"string\" == typeof n ? n : \"\", c = e.map(o), i = !!s.lineNumbers;\n    return function(e, n = 0) {\n        const r = i ? t(e) : ()=>({\n                line: 0,\n                column: 0\n            });\n        let o = n;\n        const s = [];\n        e: for(; o < e.length;){\n            let t = !1;\n            for (const n of c){\n                n.regex.lastIndex = o;\n                const c = n.regex.exec(e);\n                if (c && c[0].length > 0) {\n                    if (!n.discard) {\n                        const e = r(o), t = \"string\" == typeof n.replace ? c[0].replace(new RegExp(n.regex.source, n.regex.flags), n.replace) : c[0];\n                        s.push({\n                            state: l,\n                            name: n.name,\n                            text: t,\n                            offset: o,\n                            len: c[0].length,\n                            line: e.line,\n                            column: e.column\n                        });\n                    }\n                    if (o = n.regex.lastIndex, t = !0, n.push) {\n                        const t = n.push(e, o);\n                        s.push(...t.tokens), o = t.offset;\n                    }\n                    if (n.pop) break e;\n                    break;\n                }\n            }\n            if (!t) break;\n        }\n        return {\n            tokens: s,\n            offset: o,\n            complete: e.length <= o\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUU7d0JBQUMxQixFQUFFZ0MsSUFBSSxDQUFDOzRCQUFDQyxPQUFNMUI7NEJBQUVTLE1BQUtmLEVBQUVlLElBQUk7NEJBQUNrQixNQUFLeEM7NEJBQUVVLFFBQU9UOzRCQUFFd0MsS0FBSVQsQ0FBQyxDQUFDLEVBQUUsQ0FBQ3hCLE1BQU07NEJBQUNXLE1BQUtwQixFQUFFb0IsSUFBSTs0QkFBQ0MsUUFBT3JCLEVBQUVxQixNQUFNO3dCQUFBO29CQUFFO29CQUFDLElBQUduQixJQUFFTSxFQUFFYyxLQUFLLENBQUNjLFNBQVMsRUFBQ25DLElBQUUsQ0FBQyxHQUFFTyxFQUFFK0IsSUFBSSxFQUFDO3dCQUFDLE1BQU10QyxJQUFFTyxFQUFFK0IsSUFBSSxDQUFDdkMsR0FBRUU7d0JBQUdLLEVBQUVnQyxJQUFJLElBQUl0QyxFQUFFMEMsTUFBTSxHQUFFekMsSUFBRUQsRUFBRVUsTUFBTTtvQkFBQTtvQkFBQyxJQUFHSCxFQUFFb0MsR0FBRyxFQUFDLE1BQU01QztvQkFBRTtnQkFBSztZQUFDO1lBQUMsSUFBRyxDQUFDQyxHQUFFO1FBQUs7UUFBQyxPQUFNO1lBQUMwQyxRQUFPcEM7WUFBRUksUUFBT1Q7WUFBRTJDLFVBQVM3QyxFQUFFUyxNQUFNLElBQUVQO1FBQUM7SUFBQztBQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtbWFya2V0aW5nLXRlc3QtbmV4dC8uL25vZGVfbW9kdWxlcy9sZWFjL2xpYi9sZWFjLmNqcz80NDg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGU9L1xcbi9nO2Z1bmN0aW9uIHQodCl7Y29uc3Qgbz1bLi4udC5tYXRjaEFsbChlKV0ubWFwKChlPT5lLmluZGV4fHwwKSk7by51bnNoaWZ0KC0xKTtjb25zdCBzPW4obywwLG8ubGVuZ3RoKTtyZXR1cm4gZT0+cihzLGUpfWZ1bmN0aW9uIG4oZSx0LHIpe2lmKHItdD09MSlyZXR1cm57b2Zmc2V0OmVbdF0saW5kZXg6dCsxfTtjb25zdCBvPU1hdGguY2VpbCgodCtyKS8yKSxzPW4oZSx0LG8pLGw9bihlLG8scik7cmV0dXJue29mZnNldDpzLm9mZnNldCxsb3c6cyxoaWdoOmx9fWZ1bmN0aW9uIHIoZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaW5kZXhcIil9KGUpP3tsaW5lOmUuaW5kZXgsY29sdW1uOnQtZS5vZmZzZXR9OnIoZS5oaWdoLm9mZnNldDx0P2UuaGlnaDplLmxvdyx0KX1mdW5jdGlvbiBvKGUsdCl7cmV0dXJuey4uLmUscmVnZXg6cyhlLHQpfX1mdW5jdGlvbiBzKGUsdCl7aWYoMD09PWUubmFtZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKGBSdWxlICMke3R9IGhhcyBlbXB0eSBuYW1lLCB3aGljaCBpcyBub3QgYWxsb3dlZC5gKTtpZihmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZWdleFwiKX0oZSkpcmV0dXJuIGZ1bmN0aW9uKGUpe2lmKGUuZ2xvYmFsKXRocm93IG5ldyBFcnJvcihgUmVndWxhciBleHByZXNzaW9uIC8ke2Uuc291cmNlfS8ke2UuZmxhZ3N9IGNvbnRhaW5zIHRoZSBnbG9iYWwgZmxhZywgd2hpY2ggaXMgbm90IGFsbG93ZWQuYCk7cmV0dXJuIGUuc3RpY2t5P2U6bmV3IFJlZ0V4cChlLnNvdXJjZSxlLmZsYWdzK1wieVwiKX0oZS5yZWdleCk7aWYoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyXCIpfShlKSl7aWYoMD09PWUuc3RyLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoYFJ1bGUgIyR7dH0gKFwiJHtlLm5hbWV9XCIpIGhhcyBlbXB0eSBcInN0clwiIHByb3BlcnR5LCB3aGljaCBpcyBub3QgYWxsb3dlZC5gKTtyZXR1cm4gbmV3IFJlZ0V4cChsKGUuc3RyKSxcInlcIil9cmV0dXJuIG5ldyBSZWdFeHAobChlLm5hbWUpLFwieVwiKX1mdW5jdGlvbiBsKGUpe3JldHVybiBlLnJlcGxhY2UoL1stW1xcXXt9KCkqKyE8PTo/Li9cXFxcXiR8I1xccyxdL2csXCJcXFxcJCZcIil9ZXhwb3J0cy5jcmVhdGVMZXhlcj1mdW5jdGlvbihlLG49XCJcIixyPXt9KXtjb25zdCBzPVwic3RyaW5nXCIhPXR5cGVvZiBuP246cixsPVwic3RyaW5nXCI9PXR5cGVvZiBuP246XCJcIixjPWUubWFwKG8pLGk9ISFzLmxpbmVOdW1iZXJzO3JldHVybiBmdW5jdGlvbihlLG49MCl7Y29uc3Qgcj1pP3QoZSk6KCk9Pih7bGluZTowLGNvbHVtbjowfSk7bGV0IG89bjtjb25zdCBzPVtdO2U6Zm9yKDtvPGUubGVuZ3RoOyl7bGV0IHQ9ITE7Zm9yKGNvbnN0IG4gb2YgYyl7bi5yZWdleC5sYXN0SW5kZXg9bztjb25zdCBjPW4ucmVnZXguZXhlYyhlKTtpZihjJiZjWzBdLmxlbmd0aD4wKXtpZighbi5kaXNjYXJkKXtjb25zdCBlPXIobyksdD1cInN0cmluZ1wiPT10eXBlb2Ygbi5yZXBsYWNlP2NbMF0ucmVwbGFjZShuZXcgUmVnRXhwKG4ucmVnZXguc291cmNlLG4ucmVnZXguZmxhZ3MpLG4ucmVwbGFjZSk6Y1swXTtzLnB1c2goe3N0YXRlOmwsbmFtZTpuLm5hbWUsdGV4dDp0LG9mZnNldDpvLGxlbjpjWzBdLmxlbmd0aCxsaW5lOmUubGluZSxjb2x1bW46ZS5jb2x1bW59KX1pZihvPW4ucmVnZXgubGFzdEluZGV4LHQ9ITAsbi5wdXNoKXtjb25zdCB0PW4ucHVzaChlLG8pO3MucHVzaCguLi50LnRva2Vucyksbz10Lm9mZnNldH1pZihuLnBvcClicmVhayBlO2JyZWFrfX1pZighdClicmVha31yZXR1cm57dG9rZW5zOnMsb2Zmc2V0Om8sY29tcGxldGU6ZS5sZW5ndGg8PW99fX07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlIiwidCIsIm8iLCJtYXRjaEFsbCIsIm1hcCIsImluZGV4IiwidW5zaGlmdCIsInMiLCJuIiwibGVuZ3RoIiwiciIsIm9mZnNldCIsIk1hdGgiLCJjZWlsIiwibCIsImxvdyIsImhpZ2giLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJsaW5lIiwiY29sdW1uIiwicmVnZXgiLCJuYW1lIiwiRXJyb3IiLCJnbG9iYWwiLCJzb3VyY2UiLCJmbGFncyIsInN0aWNreSIsIlJlZ0V4cCIsInN0ciIsInJlcGxhY2UiLCJjcmVhdGVMZXhlciIsImMiLCJpIiwibGluZU51bWJlcnMiLCJsYXN0SW5kZXgiLCJleGVjIiwiZGlzY2FyZCIsInB1c2giLCJzdGF0ZSIsInRleHQiLCJsZW4iLCJ0b2tlbnMiLCJwb3AiLCJjb21wbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/leac/lib/leac.cjs\n");

/***/ })

};
;